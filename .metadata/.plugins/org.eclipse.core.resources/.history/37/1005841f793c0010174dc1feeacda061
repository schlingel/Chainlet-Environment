package at.chainlet.rse.plugin;

import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.ServiceLoader;
import java.util.jar.*;
import java.util.*;
import java.net.JarURLConnection;
import java.net.URL;
import java.net.URLClassLoader;

import at.chainlet.rse.core.Word;

import com.thoughtworks.xstream.XStream;

/**
 * <p>This class handles the instancing and loading of RSE plugin jars.</p>
 * <ol>
 * <li>It parses the given jar file for the mapping.xml file. If the file is wrong formatted or inconsistent it throws exceptions</li>
 * <li>It creates a hash map with the dictionary names as key and the list of words as value.</li>
 * </ol>
 */
public class PluginManager {
	public final String MAPPING_FILE_NAME = "mapping.xml";
	
	/**
	 * XStreaming object for deserialization of the mapping object.
	 */
	private XStream streamer;
	
	private ServiceLoader<Word> serviceActivator;
	
	public PluginManager() {
		streamer = new XStream();
	}
	
	public void getWordsFrom(String jarFilePath) throws IOException {
		File file = new File(jarFilePath);
		serviceActivator = ServiceLoader.load(Word.class, new URLClassLoader(new URL[] { file.toURI().toURL() }));
		Mapping map = getMappingFrom(file);
		
	}
	
	private HashMap<String, ArrayList<Word>> getLoadedJars(Mapping map, Iterator<Word> words) {
		HashMap<String, ArrayList<Word>> dictionary = new HashMap<String, ArrayList<Word>>(); 
		
		while(words.hasNext()) {
			Word w = words.next();
			
			for(DictionaryMapping dic : map.getDictionaryMappings()) {
				if(arrayContains(dic.getWords(), w.getName())) {
					
				}
			}
		}
		
		return dictionary;
	}
	
	private boolean arrayContains(String[] arr, String val) {
		for(String v : arr) {
			if(val.equals(v))
				return true;
		}
		
		return false;
	}
	
	/**
	 * Reads the jar file and returns the mapping.xml file as model object. If the file 
	 * does not exist in the jar or an other IO error occours the method throws an io exception.
	 * @param file
	 * @return The mapping object of the mapping.xml
	 * @throws IOException
	 */
	private Mapping getMappingFrom(File file) throws IOException {
		if(file == null)
			throw new IllegalArgumentException("The input jar file must not be null!");
		
		JarFile jFile = new JarFile(file);
		JarEntry entry = jFile.getJarEntry(MAPPING_FILE_NAME);
		
		if(entry == null)
			throw new IllegalArgumentException("The given jar file doesn't contain a mapping.xml file!");
		
		return (Mapping)streamer.fromXML(jFile.getInputStream(entry));
	}
}
