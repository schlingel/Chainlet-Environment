package at.chainlet.rse.core;

import org.junit.Test;
import static org.junit.Assert.*;

public class JournalingWordList_Test extends RSECoreTest {
	
	@Test
	public void emptyListShouldReturnFalseOnHasOlderVersions() {
		JournalingWordList wl = new JournalingWordList();
		assertFalse(wl.hasOlderVersions());
	}
	
	@Test
	public void emptyListShouldReturnFalseOnHasNewerVersions() {
		JournalingWordList wl = new JournalingWordList();
		assertFalse(wl.hasNewerVersions());
	}
	
	@Test
	public void notEmptyListShouldReturnTrueOnHasOlderVersions() {
		JournalingWordList wl = new JournalingWordList();
		for(int i = 0; i < 10; i++) {
			wl.add(getMockWord("word" + i));
		}
			
		assertTrue(wl.hasOlderVersions());
	}
	
	@Test
	public void getCurrentVersionShouldReturnSecondVersion() {
		JournalingWordList wl = new JournalingWordList();
		Word[] words = new Word[3];
		
		for(int i = 0; i < 3; i++) {
			words[i] = getMockWord("word");
			wl.add(words[i]);
		}
		
		wl.goBackInJournal();
		assertEquals(words[1], wl.current());
	}
	
	@Test
	public void getCurrentVersionShouldReturnFirstVersion() {
		JournalingWordList wl = new JournalingWordList();
		Word[] words = new Word[3];
		
		for(int i = 0; i < 3; i++) {
			words[i] = getMockWord("word");
			wl.add(words[i]);
		}
		
		wl.goBackInJournal();
		wl.goBackInJournal();
		assertEquals(words[0], wl.current());
	}
	
	@Test
	public void goBackInJournalShouldReturnFalseInEmptyWordList() {
		JournalingWordList wl = new JournalingWordList();
		Word[] words = new Word[100];
		
		for(int i = 0; i < 100; i++) {
			words[i] = getMockWord("word");
			wl.add(words[i]);
		}
		
		// Remove entries but not in a straight row
		for(int i = 0; i < 100; i += 2) { wl.remove(i); }
		for(int i = 1; i < 100; i += 2) { wl.remove(i); }
		
		assertFalse(wl.goBackInJournal());
	}
	
	@Test
	public void goBackInJournalShouldReturnFalseInNewWordList() {
		JournalingWordList wl = new JournalingWordList();
		assertFalse(wl.goBackInJournal());
	}
	
	@Test
	public void goForthInJournalShouldReturnFalseIfTheCurrentIsTheLatest() {
		JournalingWordList wl = new JournalingWordList();
		for(int i = 0; i < 100; i++) {
			wl.add(getMockWord("word"));
		}
		
		assertFalse(wl.goForthInJournal());
	}
	
	public void goForthInJournalInEmptyWordListShouldReturnFalse() {
		
	}
}
