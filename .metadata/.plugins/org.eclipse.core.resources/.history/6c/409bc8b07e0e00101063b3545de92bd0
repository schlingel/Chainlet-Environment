package at.chainlet.rse.core;

import org.junit.Test;

import at.chainlet.rse.core.exceptions.RSEInvalidStateException;
import static org.junit.Assert.*;

/**
 * Contains the tests of the Dictionary class.
 */
public class Dictionary_Tests extends RSECoreTest {	
	@Test(expected = IllegalArgumentException.class)
	public void addNullWordShouldThrowIllegalArgumentException() throws RSEInvalidStateException {
		Dictionary dic = getMockDictionary("Test");
		dic.add(null);
	}
	
	@Test(expected = RSEInvalidStateException.class)
	public void addNamelesWordShouldThrowRSEInvalidStateException() throws RSEInvalidStateException {
		Dictionary dic = new Dictionary();
		dic.add(new MockWord(""));
	}
	
	@Test
	public void containsShouldReturnTrueIfWordExists() {
		Dictionary dic = new Dictionary();
		Word w = new MockWord("testibert");
		try {
			dic.add(w);
			assertTrue(dic.contains(w));
		}
		catch(Exception e) { assertEquals(e.getMessage(), null, e); }
	}
	
	@Test 
	public void containsShouldReturnFalseIfWordDoesntExist1() {
		Dictionary dic = new Dictionary();
		assertFalse(dic.contains("Not there!"));
	}

	@Test 
	public void containsShouldReturnFalseIfWordDoesntExist2() throws RSEInvalidStateException {
		Dictionary dic = new Dictionary();
		Word w = new MockWord("Not there!");
		assertFalse(dic.contains(w));
	}	
	
	@Test(expected = IllegalArgumentException.class)
	public void containsShouldThrowIllegalArgumentException() throws RSEInvalidStateException {
		Dictionary dic = new Dictionary();
		Word w = null;
		dic.contains(w);
	}
	
	@Test(expected = RSEInvalidStateException.class)
	public void containsShouldThrowRSEInvalidStateExceptionOnEmptyName() throws RSEInvalidStateException {
		Dictionary dic = new Dictionary();
		Word w = new MockWord("");
		dic.contains(w);
	}
	
	@Test
	public void getShouldReturnNullOnUnknownName() {
		Dictionary dic = new Dictionary();
		assertNull(dic.get("Not there!"));
	}
	
	@Test
	public void getShouldReturnTheWordWithTheGivenName() throws RSEInvalidStateException {
		Dictionary dic = new Dictionary();
		Word w = new MockWord("test");
		dic.add(w);
		assertEquals(w, dic.get(w.getName()));
	}
}
