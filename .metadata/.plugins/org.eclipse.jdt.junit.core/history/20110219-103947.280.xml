<?xml version="1.0" encoding="UTF-8"?>
<testrun name="tests" project="RSE" tests="51" started="51" failures="0" errors="0" ignored="0">
  <testsuite name="at.chainlet.rse.core.JournalingWordList_Test" time="0.011">
    <testcase name="emptyListShouldReturnFalseOnHasOlderVersions" classname="at.chainlet.rse.core.JournalingWordList_Test" time="0.003"/>
    <testcase name="emptyListShouldReturnFalseOnHasNewerVersions" classname="at.chainlet.rse.core.JournalingWordList_Test" time="0.0"/>
    <testcase name="notEmptyListShouldReturnTrueOnHasOlderVersions" classname="at.chainlet.rse.core.JournalingWordList_Test" time="0.0"/>
    <testcase name="getCurrentVersionShouldReturnSecondVersion" classname="at.chainlet.rse.core.JournalingWordList_Test" time="0.0"/>
    <testcase name="getCurrentVersionShouldReturnFirstVersion" classname="at.chainlet.rse.core.JournalingWordList_Test" time="0.0"/>
    <testcase name="goBackInJournalShouldReturnFalseInEmptyWordList" classname="at.chainlet.rse.core.JournalingWordList_Test" time="0.0"/>
    <testcase name="goBackInJournalShouldReturnFalseInNewWordList" classname="at.chainlet.rse.core.JournalingWordList_Test" time="0.0"/>
    <testcase name="goForthInJournalShouldReturnFalseIfTheCurrentIsTheLatest" classname="at.chainlet.rse.core.JournalingWordList_Test" time="0.0"/>
    <testcase name="goForthInJournalInEmptyWordListShouldReturnFalse" classname="at.chainlet.rse.core.JournalingWordList_Test" time="0.0"/>
    <testcase name="goForthInJournalShouldReturnLatestAfterGoBackOnce" classname="at.chainlet.rse.core.JournalingWordList_Test" time="0.0"/>
    <testcase name="currentShouldReturnLatestEntryAfterRemovingEntries" classname="at.chainlet.rse.core.JournalingWordList_Test" time="0.0"/>
    <testcase name="currentShouldReturnFirstIfItsCalledToManyTimes" classname="at.chainlet.rse.core.JournalingWordList_Test" time="0.007"/>
  </testsuite>
  <testsuite name="at.chainlet.rse.core.Library_Tests" time="0.054">
    <testcase name="prioritizeShouldCreateDictOnNotExistingNamesInNotEmptyDict" classname="at.chainlet.rse.core.Library_Tests" time="0.0"/>
    <testcase name="prioritizeShouldCreateDictOnNotExistingNamesInEmptyDict" classname="at.chainlet.rse.core.Library_Tests" time="0.001"/>
    <testcase name="prioritizeShouldPrioritizeExistingDict" classname="at.chainlet.rse.core.Library_Tests" time="0.0"/>
    <testcase name="addShouldTrowIllegalArgumentExceptionOnNullValue" classname="at.chainlet.rse.core.Library_Tests" time="0.001"/>
    <testcase name="createDictionaryShouldThrowIllegalArgumentExceptionOnEmptyName" classname="at.chainlet.rse.core.Library_Tests" time="0.0"/>
    <testcase name="createDictionaryShouldThrowIllegalArgumentExceptionOnNullValue" classname="at.chainlet.rse.core.Library_Tests" time="0.0"/>
    <testcase name="getWorkingDictionaryShouldReturnNullInEmptyLibrary" classname="at.chainlet.rse.core.Library_Tests" time="0.0"/>
    <testcase name="getWorkingDictionaryShouldReturnLatestDict" classname="at.chainlet.rse.core.Library_Tests" time="0.0"/>
    <testcase name="wordExistsShouldReturnFalseOnNotExistingWord" classname="at.chainlet.rse.core.Library_Tests" time="0.001"/>
    <testcase name="wordExistsShouldReturnTrueOnExistingWordAndOnlyTheNameAsParameter" classname="at.chainlet.rse.core.Library_Tests" time="0.01"/>
    <testcase name="wordExistsShouldReturnTrueOnExistingWordWithNamespaceAndNameAsParameter" classname="at.chainlet.rse.core.Library_Tests" time="0.004"/>
    <testcase name="getWordShouldReturnLatestWordWithName" classname="at.chainlet.rse.core.Library_Tests" time="0.001"/>
    <testcase name="getWordShouldReturnWordFromTheChoosenDictionary" classname="at.chainlet.rse.core.Library_Tests" time="0.005"/>
    <testcase name="getWordShouldReturnNullForNotExistingName" classname="at.chainlet.rse.core.Library_Tests" time="0.014"/>
    <testcase name="getWordShouldReturnNullForNotExistingNameInGivenNamespaceWordName" classname="at.chainlet.rse.core.Library_Tests" time="0.017"/>
  </testsuite>
  <testsuite name="at.chainlet.rse.core.utils.StringSplitter_Test" time="0.01">
    <testcase name="split_ShouldReturnEmptyArrayOnNull" classname="at.chainlet.rse.core.utils.StringSplitter_Test" time="0.008"/>
    <testcase name="split_ShouldReturnArrayWithTheInputStringAsOnlyElement" classname="at.chainlet.rse.core.utils.StringSplitter_Test" time="0.0"/>
    <testcase name="split_ShouldReturnArrayWithTheSplittedWords" classname="at.chainlet.rse.core.utils.StringSplitter_Test" time="0.001"/>
    <testcase name="split_ShouldReturnArrayWithTheSplittedWordsAndSpacesOnOtherDelimiterChar" classname="at.chainlet.rse.core.utils.StringSplitter_Test" time="0.0"/>
    <testcase name="split_ShouldReactProperToTheDifferentDelimiterSequencesLengths" classname="at.chainlet.rse.core.utils.StringSplitter_Test" time="0.001"/>
  </testsuite>
  <testsuite name="at.chainlet.rse.core.WordStatusObserverExchanger_Test" time="0.047">
    <testcase name="allObserversGetCalled" classname="at.chainlet.rse.core.WordStatusObserverExchanger_Test" time="0.034"/>
    <testcase name="removedObserverDontGetCalled" classname="at.chainlet.rse.core.WordStatusObserverExchanger_Test" time="0.008"/>
    <testcase name="notifyCallShouldDeliverTheWordWhichHasFinished" classname="at.chainlet.rse.core.WordStatusObserverExchanger_Test" time="0.0"/>
    <testcase name="notifyCallShouldDeliverTheLastWordWhichHasFinished" classname="at.chainlet.rse.core.WordStatusObserverExchanger_Test" time="0.005"/>
  </testsuite>
  <testsuite name="at.chainlet.rse.core.Dictionary_Tests" time="0.006">
    <testcase name="addNullWordShouldThrowIllegalArgumentException" classname="at.chainlet.rse.core.Dictionary_Tests" time="0.0"/>
    <testcase name="addNamelesWordShouldThrowRSEInvalidStateException" classname="at.chainlet.rse.core.Dictionary_Tests" time="0.001"/>
    <testcase name="containsShouldReturnTrueIfWordExists" classname="at.chainlet.rse.core.Dictionary_Tests" time="0.0"/>
    <testcase name="containsShouldReturnFalseIfWordDoesntExist1" classname="at.chainlet.rse.core.Dictionary_Tests" time="0.0"/>
    <testcase name="containsShouldReturnFalseIfWordDoesntExist2" classname="at.chainlet.rse.core.Dictionary_Tests" time="0.0"/>
    <testcase name="containsShouldThrowIllegalArgumentException" classname="at.chainlet.rse.core.Dictionary_Tests" time="0.001"/>
    <testcase name="containsShouldThrowRSEInvalidStateExceptionOnEmptyName" classname="at.chainlet.rse.core.Dictionary_Tests" time="0.0"/>
    <testcase name="getShouldReturnNullOnUnknownName" classname="at.chainlet.rse.core.Dictionary_Tests" time="0.0"/>
    <testcase name="getShouldReturnTheWordWithTheGivenName" classname="at.chainlet.rse.core.Dictionary_Tests" time="0.0"/>
    <testcase name="getShouldReturnTheLatestWord" classname="at.chainlet.rse.core.Dictionary_Tests" time="0.003"/>
    <testcase name="setOlderVersionOfTwiceShouldReturnTheThirdLatestVersion" classname="at.chainlet.rse.core.Dictionary_Tests" time="0.0"/>
    <testcase name="setOlderVersionShouldReturnFalseIfThereNotThatManyOldVersions" classname="at.chainlet.rse.core.Dictionary_Tests" time="0.0"/>
    <testcase name="setOlderVersionShouldReturnTrueIfItWorked" classname="at.chainlet.rse.core.Dictionary_Tests" time="0.001"/>
  </testsuite>
  <testsuite name="at.chainlet.rse.core.RudimentaryStackVM_Test" time="0.07">
    <testcase name="pollNextTerm_ShouldExecuteTermAsWordWhenItsInTheLibrary" classname="at.chainlet.rse.core.RudimentaryStackVM_Test" time="0.069"/>
    <testcase name="parse_ShouldCreateATermQueueFromTheGivenInput" classname="at.chainlet.rse.core.RudimentaryStackVM_Test" time="0.001"/>
  </testsuite>
</testrun>
